// generated by genrx -name Uint8 -type uint8 rx.go; DO NOT EDIT

package rx

import (
	"sync"
	"time"
)

// Uint8 is the reactive wrapper for uint8
type Uint8 struct {
	value uint8
	lock  sync.RWMutex

	handles     chan int
	subscribers []chan<- uint8
}

// NewUint8 creates a new reactive object for the initial value of uint8
func NewUint8(v uint8) *Uint8 {
	return &Uint8{
		value:   v,
		handles: make(chan int, 10),
	}
}

// Get gets the uint8
func (rx *Uint8) Get() uint8 {
	rx.lock.RLock()
	defer rx.lock.RUnlock()
	return rx.value
}

// Set sets the uint8 and notifies subscribers
func (rx *Uint8) Set(v uint8) {
	rx.lock.Lock()
	defer rx.lock.Unlock()
	rx.value = v

	for _, s := range rx.subscribers {
		if s != nil {
			s <- v
		}
	}
}

// Subscribe subscribes to changes on the uint8
func (rx *Uint8) Subscribe() *Uint8Subscriber {

	c := make(chan uint8)

	s := &Uint8Subscriber{
		C:      c,
		parent: rx,
	}

	rx.lock.Lock()
	select {
	case handle := <-rx.handles:
		s.handle = handle
		rx.subscribers[handle] = c
	default:
		rx.subscribers = append(rx.subscribers, c)
		s.handle = len(rx.subscribers) - 1
	}

	rx.lock.Unlock()

	return s
}

// Uint8Subscriber allows subscribing to the reactive uint8
type Uint8Subscriber struct {
	C      <-chan uint8
	handle int
	parent *Uint8
}

// Close closes the subscription
func (s *Uint8Subscriber) Close() {
	// remove from parent and close channel
	s.parent.lock.Lock()
	close(s.parent.subscribers[s.handle])
	s.parent.subscribers[s.handle] = nil
	s.parent.lock.Unlock()

	go func() {
		select {
		case s.parent.handles <- s.handle:
		case <-time.After(1 * time.Millisecond):
		}
	}()
}
