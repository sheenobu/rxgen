// generated by genrx -name RxUint8 -type uint8 .; DO NOT EDIT

package rx

import (
	"sync"
)

// RxUint8 is the reactive wrapper for uint8
type RxUint8 struct {
	value uint8
	lock  sync.RWMutex

	handles     chan int
	subscribers []chan<- uint8
}

// NewRxUint8 creates a new reactive object for the initial value of uint8
func NewRxUint8(v uint8) *RxUint8 {
	return &RxUint8{
		value:   v,
		handles: make(chan int, 1),
	}
}

// Get gets the uint8
func (rx *RxUint8) Get() uint8 {
	rx.lock.RLock()
	defer rx.lock.RUnlock()
	return rx.value
}

// Set sets the uint8 and notifies subscribers
func (rx *RxUint8) Set(v uint8) {
	rx.lock.Lock()
	defer rx.lock.Unlock()
	rx.value = v

	for _, s := range rx.subscribers {
		if s != nil {
			s <- v
		}
	}
}

// Subscribe subscribes to changes on the uint8
func (rx *RxUint8) Subscribe() *RxUint8Subscriber {

	c := make(chan uint8)

	s := &RxUint8Subscriber{
		C:      c,
		parent: rx,
	}

	rx.lock.Lock()
	select {
	case handle := <-rx.handles:
		s.handle = handle
		rx.subscribers[handle] = c
	default:
		rx.subscribers = append(rx.subscribers, c)
		s.handle = len(rx.subscribers) - 1
	}

	rx.lock.Unlock()

	return s
}

// RxUint8Subscriber allows subscribing to the reactive uint8
type RxUint8Subscriber struct {
	C      <-chan uint8
	handle int
	parent *RxUint8
}

// Close closes the subscription
func (s *RxUint8Subscriber) Close() {
	// remove from parent and close channel
	s.parent.lock.Lock()
	close(s.parent.subscribers[s.handle])
	s.parent.subscribers[s.handle] = nil
	s.parent.lock.Unlock()

	go func() {
		s.parent.handles <- s.handle
	}()
}
