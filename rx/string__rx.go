// Generated by: main
// TypeWriter: rx
// Directive: +gen on String_

package rx

import (
	"context"
	sync "sync"
)

// String is the reactive wrapper for string
type String struct {
	value       string
	lock        sync.RWMutex
	handles     chan int
	subscribers []chan<- string
}

// NewString creates a new reactive object for the initial value of string
func NewString(v string) *String {
	return &String{
		value:   v,
		handles: make(chan int, 10),
	}
}

// Get gets the string
func (rx *String) Get() string {
	rx.lock.RLock()
	defer rx.lock.RUnlock()
	return rx.value
}

// Set sets the string and notifies subscribers
func (rx *String) Set(v string) {
	rx.lock.Lock()
	defer rx.lock.Unlock()
	rx.value = v
	for _, s := range rx.subscribers {
		if s != nil {
			s <- v
		}
	}
}

// Subscribe subscribes to changes on the string
func (rx *String) Subscribe() *StringSubscriber {
	c := make(chan string)
	s := &StringSubscriber{
		C:      c,
		parent: rx,
	}
	rx.lock.Lock()
	select {
	case handle := <-rx.handles:
		s.handle = handle
		rx.subscribers[handle] = c
	default:
		rx.subscribers = append(rx.subscribers, c)
		s.handle = len(rx.subscribers) - 1
	}
	rx.lock.Unlock()
	return s
}

// StringSubscriber allows subscribing to the reactive string
type StringSubscriber struct {
	C      <-chan string
	handle int
	parent *String
}

// Close closes the subscription
func (s *StringSubscriber) Close() {
	// remove from parent and close channel
	s.parent.lock.Lock()
	close(s.parent.subscribers[s.handle])
	s.parent.subscribers[s.handle] = nil
	s.parent.lock.Unlock()
	go func() {
		select {
		case s.parent.handles <- s.handle:
		default:
		}
	}()
}

// Bind applies all changes to the 'other' String to this name and returns a CancelFunc for
// closure
func (s *String) Bind(ctx context.Context, other *String) context.CancelFunc {
	ctx, cancel := context.WithCancel(ctx)
	go func(ctx context.Context) {
		s2 := other.Subscribe()
		defer s2.Close()
		for {
			select {
			case o := <-s2.C:
				s.Set(o)
			case <-ctx.Done():
				return
			}
		}
	}(ctx)
	return cancel
}
