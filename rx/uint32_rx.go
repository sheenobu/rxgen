// generated by genrx -name Uint32 -type uint32 rx.go; DO NOT EDIT

package rx

import (
	"sync"
	"time"
)

// Uint32 is the reactive wrapper for uint32
type Uint32 struct {
	value uint32
	lock  sync.RWMutex

	handles     chan int
	subscribers []chan<- uint32
}

// NewUint32 creates a new reactive object for the initial value of uint32
func NewUint32(v uint32) *Uint32 {
	return &Uint32{
		value:   v,
		handles: make(chan int, 10),
	}
}

// Get gets the uint32
func (rx *Uint32) Get() uint32 {
	rx.lock.RLock()
	defer rx.lock.RUnlock()
	return rx.value
}

// Set sets the uint32 and notifies subscribers
func (rx *Uint32) Set(v uint32) {
	rx.lock.Lock()
	defer rx.lock.Unlock()
	rx.value = v

	for _, s := range rx.subscribers {
		if s != nil {
			s <- v
		}
	}
}

// Subscribe subscribes to changes on the uint32
func (rx *Uint32) Subscribe() *Uint32Subscriber {

	c := make(chan uint32)

	s := &Uint32Subscriber{
		C:      c,
		parent: rx,
	}

	rx.lock.Lock()
	select {
	case handle := <-rx.handles:
		s.handle = handle
		rx.subscribers[handle] = c
	default:
		rx.subscribers = append(rx.subscribers, c)
		s.handle = len(rx.subscribers) - 1
	}

	rx.lock.Unlock()

	return s
}

// Uint32Subscriber allows subscribing to the reactive uint32
type Uint32Subscriber struct {
	C      <-chan uint32
	handle int
	parent *Uint32
}

// Close closes the subscription
func (s *Uint32Subscriber) Close() {
	// remove from parent and close channel
	s.parent.lock.Lock()
	close(s.parent.subscribers[s.handle])
	s.parent.subscribers[s.handle] = nil
	s.parent.lock.Unlock()

	go func() {
		select {
		case s.parent.handles <- s.handle:
		case <-time.After(1 * time.Millisecond):
		}
	}()
}
