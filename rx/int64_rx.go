// generated by genrx -name Int64 -type int64 .; DO NOT EDIT

package rx

import (
	"sync"
)

// Int64 is the reactive wrapper for int64
type Int64 struct {
	value int64
	lock  sync.RWMutex

	handles     chan int
	subscribers []chan<- int64
}

// NewInt64 creates a new reactive object for the initial value of int64
func NewInt64(v int64) *Int64 {
	return &Int64{
		value:   v,
		handles: make(chan int, 1),
	}
}

// Get gets the int64
func (rx *Int64) Get() int64 {
	rx.lock.RLock()
	defer rx.lock.RUnlock()
	return rx.value
}

// Set sets the int64 and notifies subscribers
func (rx *Int64) Set(v int64) {
	rx.lock.Lock()
	defer rx.lock.Unlock()
	rx.value = v

	for _, s := range rx.subscribers {
		if s != nil {
			s <- v
		}
	}
}

// Subscribe subscribes to changes on the int64
func (rx *Int64) Subscribe() *Int64Subscriber {

	c := make(chan int64)

	s := &Int64Subscriber{
		C:      c,
		parent: rx,
	}

	rx.lock.Lock()
	select {
	case handle := <-rx.handles:
		s.handle = handle
		rx.subscribers[handle] = c
	default:
		rx.subscribers = append(rx.subscribers, c)
		s.handle = len(rx.subscribers) - 1
	}

	rx.lock.Unlock()

	return s
}

// Int64Subscriber allows subscribing to the reactive int64
type Int64Subscriber struct {
	C      <-chan int64
	handle int
	parent *Int64
}

// Close closes the subscription
func (s *Int64Subscriber) Close() {
	// remove from parent and close channel
	s.parent.lock.Lock()
	close(s.parent.subscribers[s.handle])
	s.parent.subscribers[s.handle] = nil
	s.parent.lock.Unlock()

	go func() {
		s.parent.handles <- s.handle
	}()
}
