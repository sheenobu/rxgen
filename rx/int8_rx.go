// generated by genrx -name RxInt8 -type int8 .; DO NOT EDIT

package rx

import (
	"sync"
)

// RxInt8 is the reactive wrapper for int8
type RxInt8 struct {
	value int8
	lock  sync.RWMutex

	handles     chan int
	subscribers []chan<- int8
}

// NewRxInt8 creates a new reactive object for the initial value of int8
func NewRxInt8(v int8) *RxInt8 {
	return &RxInt8{
		value:   v,
		handles: make(chan int, 1),
	}
}

// Get gets the int8
func (rx *RxInt8) Get() int8 {
	rx.lock.RLock()
	defer rx.lock.RUnlock()
	return rx.value
}

// Set sets the int8 and notifies subscribers
func (rx *RxInt8) Set(v int8) {
	rx.lock.Lock()
	defer rx.lock.Unlock()
	rx.value = v

	for _, s := range rx.subscribers {
		if s != nil {
			s <- v
		}
	}
}

// Subscribe subscribes to changes on the int8
func (rx *RxInt8) Subscribe() *RxInt8Subscriber {

	c := make(chan int8)

	s := &RxInt8Subscriber{
		C:      c,
		parent: rx,
	}

	rx.lock.Lock()
	select {
	case handle := <-rx.handles:
		s.handle = handle
		rx.subscribers[handle] = c
	default:
		rx.subscribers = append(rx.subscribers, c)
		s.handle = len(rx.subscribers) - 1
	}

	rx.lock.Unlock()

	return s
}

// RxInt8Subscriber allows subscribing to the reactive int8
type RxInt8Subscriber struct {
	C      <-chan int8
	handle int
	parent *RxInt8
}

// Close closes the subscription
func (s *RxInt8Subscriber) Close() {
	// remove from parent and close channel
	s.parent.lock.Lock()
	close(s.parent.subscribers[s.handle])
	s.parent.subscribers[s.handle] = nil
	s.parent.lock.Unlock()

	go func() {
		s.parent.handles <- s.handle
	}()
}
