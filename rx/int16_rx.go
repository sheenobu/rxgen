// generated by genrx -name Int16 -type int16 .; DO NOT EDIT

package rx

import (
	"sync"
)

// Int16 is the reactive wrapper for int16
type Int16 struct {
	value int16
	lock  sync.RWMutex

	handles     chan int
	subscribers []chan<- int16
}

// NewInt16 creates a new reactive object for the initial value of int16
func NewInt16(v int16) *Int16 {
	return &Int16{
		value:   v,
		handles: make(chan int, 1),
	}
}

// Get gets the int16
func (rx *Int16) Get() int16 {
	rx.lock.RLock()
	defer rx.lock.RUnlock()
	return rx.value
}

// Set sets the int16 and notifies subscribers
func (rx *Int16) Set(v int16) {
	rx.lock.Lock()
	defer rx.lock.Unlock()
	rx.value = v

	for _, s := range rx.subscribers {
		if s != nil {
			s <- v
		}
	}
}

// Subscribe subscribes to changes on the int16
func (rx *Int16) Subscribe() *Int16Subscriber {

	c := make(chan int16)

	s := &Int16Subscriber{
		C:      c,
		parent: rx,
	}

	rx.lock.Lock()
	select {
	case handle := <-rx.handles:
		s.handle = handle
		rx.subscribers[handle] = c
	default:
		rx.subscribers = append(rx.subscribers, c)
		s.handle = len(rx.subscribers) - 1
	}

	rx.lock.Unlock()

	return s
}

// Int16Subscriber allows subscribing to the reactive int16
type Int16Subscriber struct {
	C      <-chan int16
	handle int
	parent *Int16
}

// Close closes the subscription
func (s *Int16Subscriber) Close() {
	// remove from parent and close channel
	s.parent.lock.Lock()
	close(s.parent.subscribers[s.handle])
	s.parent.subscribers[s.handle] = nil
	s.parent.lock.Unlock()

	go func() {
		s.parent.handles <- s.handle
	}()
}
