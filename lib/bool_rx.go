// generated by genrx -name RxBool -type bool .; DO NOT EDIT

package lib

import (
	"sync"
)

// RxBool is the reactive wrapper for bool
type RxBool struct {
	value bool
	lock  sync.RWMutex

	handles     chan int
	subscribers []chan<- bool
}

func NewRxBool(v bool) *RxBool {
	return &RxBool{
		value:   v,
		handles: make(chan int, 1),
	}
}

// Get gets the bool
func (rx *RxBool) Get() bool {
	rx.lock.RLock()
	defer rx.lock.RUnlock()
	return rx.value
}

// Set sets the bool and notifies subscribers
func (rx *RxBool) Set(v bool) {
	rx.lock.Lock()
	defer rx.lock.Unlock()
	rx.value = v

	for _, s := range rx.subscribers {
		if s != nil {
			s <- v
		}
	}
}

// Subscribe subscribes to changes on the bool
func (rx *RxBool) Subscribe() *RxBoolSubscriber {

	c := make(chan bool)

	s := &RxBoolSubscriber{
		C:      c,
		parent: rx,
	}

	rx.lock.Lock()
	select {
	case handle := <-rx.handles:
		s.handle = handle
		rx.subscribers[handle] = c
	default:
		rx.subscribers = append(rx.subscribers, c)
		s.handle = len(rx.subscribers) - 1
	}

	rx.lock.Unlock()

	return s
}

// RxBoolSubscriber allows subscribing to the reactive bool
type RxBoolSubscriber struct {
	C      <-chan bool
	handle int
	parent *RxBool
}

// Close closes the subscription
func (s *RxBoolSubscriber) Close() {
	// remove from parent and close channel
	s.parent.lock.Lock()
	close(s.parent.subscribers[s.handle])
	s.parent.subscribers[s.handle] = nil
	s.parent.lock.Unlock()

	go func() {
		s.parent.handles <- s.handle
	}()
}
